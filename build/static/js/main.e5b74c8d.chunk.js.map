{"version":3,"sources":["services/transformWeather.js","constants/weathers.js","constants/api_url.js","components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","App.js","serviceWorker.js","index.js"],"names":["transformWeather","weather_data","kelvin","_weather_data$main","main","humidity","temp","speed","wind","temperature","convert","from","to","toFixed","weatherState","concat","api_weather","Location","_ref","city","react_default","a","createElement","className","WeatherExtraInfo","icons","_icons","Object","defineProperty","WeatherTemperature","icon","react_weathericons_lib_default","name","size","getWeatherIcon","WeatherData","_ref$data","data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","WeatherLocation","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUpdateClick","fetch","then","resolve","json","newWeather","console","log","setState","state","prevProps","prevState","nextProps","nextState","_this$state","WeatherLocation_Location","WeatherLocation_WeatherData","onClick","Component","App","components_WeatherLocation","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5b74c8d.chunk.js","sourcesContent":["import convert from 'convert-units';\nimport {\n    CLOUD,\n    CLOUDY,\n    SUN,\n    RAIN,\n    SNOW,\n    WINDY,\n    FOG,\n} from './../constants/weathers';\n\nconst getTemp = kelvin => {\n\n    return convert(kelvin).from(\"K\").to(\"C\").toFixed(2);\n}\nconst getWeatherState = weather_data => {\n\n    return SUN;\n}\nconst transformWeather = weather_data => {\n\n    const { humidity, temp} = weather_data.main;\n    const { speed} = weather_data.wind;\n    const weatherState = getWeatherState(weather_data);\n    const temperature = getTemp(temp);\n    \n    const data = {\n\n        humidity,\n        temperature,\n        weatherState,\n        wind: `${speed} m/s`\n    }\n\n    return data;\n}\n\nexport default transformWeather;","export const CLOUD = \"cloud\";\n\nexport const CLOUDY = \"cloudy\";\n\nexport const SUN = \"sun\";\n\nexport const RAIN = \"rain\";\n\nexport const SNOW = \"snow\";\n\nexport const WINDY = \"windy\";\n\nexport const FOG = \"fog\";","const location = \"Madrid, es\";\nconst api_key = \"f99bbd9e4959b513e9bd0d7f7356b38d\";\nconst url_base_weather = \"https://api.openweathermap.org/data/2.5/weather\";\n\n/*Para pasar agrados centigrados &units=metric */\n// const api_weather = `${url_base_weather}?q=${location}&appid=${api_key}&units=metric`;\nexport const api_weather = `${url_base_weather}?q=${location}&appid=${api_key}`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\n// const Location = () => (\n//     <div><h1>Madrid</h1></div>\n// );\n\n// const Location = ({ city }) => {\n\n//     /*Herramientas de debbuging */\n//     // console.log(props);\n//     // debugger;\n    \n//     // Destructuring\n//     //const city = props.city;\n//     //const { city } = props;\n\n//     return (\n//         <div><h1>{city}</h1></div>)\n// };\n\n // En una linea\nconst Location = ({ city }) => (\n        <div className=\"locationCont\">\n            <h1>\n                {city}\n            </h1>\n        </div>\n);\n\nLocation.propTypes = {\n\n    city: PropTypes.string.isRequired,\n}\n\nexport default Location;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\nconst WeatherExtraInfo = ({humidity, wind}) => (\n\n    <div className=\"weatherExtraInfoCont\">\n        <span className=\"extraInfoText\">{`Humedad: ${humidity} % - `}</span>\n        <span className=\"extraInfoText\">{`Vientos: ${wind}`}</span>\n    </div>\n);\n\nWeatherExtraInfo.propTypes = {\n\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n}\n\nexport default WeatherExtraInfo;","import React from 'react';\nimport WeatherIcons from 'react-weathericons';\nimport PropTypes from 'prop-types';\nimport {\n    CLOUD,\n    CLOUDY,\n    SUN,\n    RAIN,\n    SNOW,\n    WINDY,\n    FOG,\n} from './../../../constants/weathers';\n\nimport './styles.css';\n\n\nconst icons = {\n\n    [CLOUD]: \"cloud\",\n    [CLOUDY]: \"cloudy\",\n    [SUN]: \"day-sunny\",\n    [RAIN]: \"rain\",\n    [SNOW]: \"snow\",\n    [WINDY]:\"windy\",\n    [FOG]: \"day-fog\"\n};\n\n\nconst getWeatherIcon = weatherState => {\n\n    const icon = icons[weatherState];\n\n    const sizeIcon = \"4x\";\n\n    if(icon)\n        return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon}></WeatherIcons>\n    else\n    return <WeatherIcons className=\"wicon\" name={'day-sunny'} size={sizeIcon}></WeatherIcons>\n}\n\nconst WeatherTemperature = ({temperature, weatherState}) => (\n\n    <div className=\"weatherTemperatureCont\">\n        {\n            getWeatherIcon(weatherState)\n        }\n        <span className=\"temperature\">{`${temperature }`}</span>\n        <span className=\"temperatureType\">{` cÂº`}</span>\n    </div>\n);\n\nWeatherTemperature.propTypes = {\n\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n}\n\n\nexport default WeatherTemperature;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherExtraInfo from './WeatherExtraInfo';\nimport WeatherTemperature from './WeatherTemperature';\nimport {\n    CLOUD,\n    CLOUDY,\n    SUN,\n    RAIN,\n    SNOW,\n    WINDY,\n    FOG,\n} from './../../../constants/weathers';\n\nimport './styles.css';\n\nconst WeatherData = ({ data: {temperature,weatherState,humidity,wind } }) => (\n    \n    <div className=\"weatherDataCont\">\n        <WeatherTemperature temperature={temperature} weatherState={weatherState} ></WeatherTemperature>\n        <WeatherExtraInfo humidity={humidity} wind={wind}></WeatherExtraInfo>\n    </div>\n);\n\nWeatherData.propTypes = {\n\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    }),\n}\n\nexport default WeatherData;","import React, {Component} from 'react';\nimport transformWeather from './../../services/transformWeather';\nimport {api_weather}  from './../../constants/api_url';\nimport Location from './Location';\nimport WeatherData from './WeatherData';\nimport './styles.css';\nimport {\n    CLOUD,\n    CLOUDY,\n    SUN,\n    RAIN,\n    SNOW,\n    WINDY,\n    FOG,\n} from './../../constants/weathers';\n\n\n\nconst data = {\n\n    temperature : '25',\n    weatherState: SUN,\n    humidity: 20,\n    wind: '30 m/s'\n}\n\nclass WeatherLocation extends Component {\n\n    constructor() {\n        super();\n        /*this.state = {}... Solo dentro del constructor*/ \n        this.state = {\n            city: 'Madrid',\n            data: data,\n        };\n\n        console.log(\"constructor\");\n    }\n\n    componentDidMount() {\n        \n        console.log(\"componentDidMount\");\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        \n        console.log(\"componentDidUpdate\");\n    }\n    \n    \n    componentWillMount() {\n        \n        console.log(\"INSEGURO componentWillMount\");\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        \n        console.log(\"INSEGURO componentWillUpdate\");\n    }\n    \n    \n    \n\n\n    handleUpdateClick = () => {\n\n        fetch(api_weather).then(resolve => {\n\n            return resolve.json();\n        }).then(data =>{\n            const newWeather = transformWeather(data);\n            console.log(newWeather);\n            // debugger;\n            this.setState ({\n                data: newWeather,\n            });             \n        });\n       \n    }\n    render() {\n        console.log(\"render\");\n        const { city, data} = this.state;\n        return (<div className=\"weatherLocationCont\">\n            <Location city={city}></Location>\n            <WeatherData data={data}></WeatherData>\n            <button onClick={this.handleUpdateClick}>Actualizar</button>\n        </div>)\n\n        \n    }\n};\n\nexport default WeatherLocation;","import React, { Component } from 'react';\nimport WeatherLocation from './components/WeatherLocation';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n            <WeatherLocation></WeatherLocation>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}